#!/usr/bin/env bash

####################################### BASIC TOOLS
# GREEN='\033[0;32m'
RED='\033[0;31m'
BLUE='\033[0;34m'
YELLOW='\033[0;33m'
BOLD=$(tput bold)
NORMAL=$(tput sgr0)
RESET='\033[0;m'

############################# printing functions
info() {
  echo "$BLUE $BOLD ==>$NORMAL $BOLD $1 $RESET"
}

warn() {
  echo "$YELLOW $BOLD Warning:$NORMAL $1 $RESET"
}

error() {
  echo "$RED $BOLD Error:$NORMAL $1 $RESET"
}

xdg_error() {
  local shell_startup

  if [[ -e "$HOME/.zshrc" ]]; then
    shell_startup="$HOME/.zshrc"
  elif [[ -e "$HOME/.bashrc" ]]; then
    shell_startup="$HOME/.bashrc"
  fi

  local xdg_dir=""
  if [[ "$1" == "XDG_CONFIG_HOME" ]]; then
    xdg_dir="XDG_CONFIG_HOME=\~/.config"
  elif [[ "$1" == "XDG_DATA_HOME" ]]; then
    xdg_dir="XDG_DATA_HOME=\~/.local/share"
  elif [[ "$1" == "XDG_CACHE_HOME" ]]; then
    xdg_dir="XDG_CACHE_HOME=\~/.cache"
  fi
  msg="try: echo \"export $xdg_dir\" >> $shell_startup"

  error "\$$1 must be set to use these vim config files. \n$msg \
  \nSee: http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html"
}

die() {
  error "$1"
  exit 1
}

####################################### FUNCTIONS
############################# I/O
write_bootstrap_config() {
cat >"$1" <<EOF
if !has('nvim')
  set nocompatible
endif

if empty("\$XDG_CACHE_HOME")
  let \$XDG_CACHE_HOME = "$HOME/.cache"
endif

if empty("\$XDG_CONFIG_HOME")
  let \$XDG_CONFIG_HOME = "$HOME/.config"
endif

if empty("\$XDG_DATA_HOME")
  let \$XDG_DATA_HOME = "$HOME/.local/share"
endif

set runtimepath=\$XDG_CONFIG_HOME/vim,\$XDG_DATA_HOME/vim/plugged,\$XDG_CONFIG_HOME/vim/after,\$VIM,\$VIMRUNTIME
set directory=\$XDG_CACHE_HOME/vim/swap,~/,/tmp
set backupdir=\$XDG_CACHE_HOME/vim/backup,~/,/tmp
set undodir=\$XDG_CACHE_HOME/vim/undo,~/,/tmp

let g:session_autosave = 'no'

source \$XDG_CONFIG_HOME/vim/Plug.vim
EOF
}

mkdir_p() {
  for dir in "$@"; do
    mkdir -p "$dir" &>/dev/null
  done
}

make_vim_dirs() {
  mkdir_p "$XDG_CONFIG_HOME"/vim \
          "$XDG_CACHE_HOME"/vim/{undo,swap,backup} \
          "$XDG_DATA_HOME"/vim/{sessions,snippets}
}

############################# backup
do_backup() {
  info "Backing up your original vim configuration"
  # msg=$(date +%Y-%m-%d_%s)
  msg="original"
  for file in "$@"; do
    if [[ -e "$file" ]] || [[ -L "$file" ]]; then
      mv -v "$file" "$file.$msg"
    fi
  done
}

############################# linkers
link() {
  ln -vsf "$1" "$2" 2> /dev/null
}

link_config() {
  info "Linking vim configuration files"
  for file in "$@"; do
    link "$COLA_CONFIG_HOME/$file" "$HOME/.$file"
  done

  if hash nvim &>/dev/null; then
    link "$COLA_CONFIG_HOME" "$HOME/.nvim"
    link "$COLA_CONFIG_HOME/vimrc" "$HOME/.nvimrc"
  fi
}

link_snippet() {
  for file in "$@"; do
    link "$COLA_CONFIG_HOME/snippets/${file}.snip" \
         "$XDG_DATA_HOME/vim/snippets/${file}.snip"
  done
}

############################# installers
install_vim_plug() {
  info "Installing vim-plug"
  [[ -e "$2/bundle" ]] && rm -rf "$2/bundle"
  download "$1" "$2/autoload/plug.vim"
}

install_go_dep() {
  info "Installing golang dependencies..."
  for package in "$@"; do
    echo "Installing ${package}..."
    go get -f -u "$package"
    link_snippet "go"
  done
}

install_plugins() {
  local vimrc="$1"
  local vimcmd="$2"
  vim -u "$vimrc" +"$vimcmd" +'qall!'
  if hash nvim &>/dev/null; then
    nvim -u "$vimrc" +"$vimcmd" +'qall!'
  fi
}

bootstrap_plugins() {
  info "Installing plugins & plugin dependencies"
  local vimrc="$1"
  install_plugins "$vimrc" "silent! PlugInstall!|silent! GoInstallBinaries!|"
}

update_plugins() {
  info "Updating plugins & plugin dependencies"
  install_plugins "$1" "PlugUpgrade|silent! PlugClean!|silent! PlugUpdate|"
}

############################# downloaders
download() {
  curl -fLo "$2" --create-dirs "$1"
}

clone_repo() {
  local repo_path="$1"
  local repo_uri="$2"
  local repo_branch="$3"
  local repo_name="$4"
  info "Installing $repo_name"
  mkdir_p "$repo_path"
  git clone -b "$repo_branch" "$repo_uri" "$repo_path"
}

update_repo() {
  local repo_path="$1"
  local repo_uri="$2"
  local repo_branch="$3"
  local repo_name="$4"
  info "Updating $repo_name"
  cd "$repo_path" && git pull origin "$repo_branch"
}

#######################################  SETUP
[[ -z "$XDG_CONFIG_HOME" ]] && xdg_error "XDG_CONFIG_HOME" && should_die=1
[[ -z "$XDG_CACHE_HOME" ]] && xdg_error "XDG_CACHE_HOME" && should_die=1
[[ -z "$XDG_DATA_HOME" ]] && xdg_error "XDG_DATA_HOME" && should_die=1
[[ "$should_die" -eq 1 ]] && exit 1

COLA_APP_NAME="speed-cola"
[[ -z "$COLA_CONFIG_HOME" ]] && COLA_CONFIG_HOME="$XDG_CONFIG_HOME/vim"
[[ -z "$COLA_REPO_URL" ]] && COLA_REPO_URL="https://github.com/mkwmms/speed-cola"
[[ -z "$COLA_REPO_BRANCH" ]] && COLA_REPO_BRANCH='master'

plugin_url='https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'

repo_vimrc_files="vimrc"
# hash gvim &>/dev/null && repo_vimrc_files="vimrc gvimrc"

####################################### MAIN()
if [[ -e "$COLA_CONFIG_HOME" ]]; then
  cd "$COLA_CONFIG_HOME"
  should_update_repo=false
  [[ $(git remote -v) =~ $COLA_REPO_URL} ]] && should_update_repo=true
else
  should_update_repo=false
fi

if [[ "$should_update_repo" == true ]]; then
  make_vim_dirs

  update_repo "$COLA_CONFIG_HOME" \
              "$COLA_REPO_URL" \
              "$COLA_REPO_BRANCH" \
              "$COLA_APP_NAME"

  update_plugins "$COLA_CONFIG_HOME/vimrc"
else
  do_backup "$HOME/.vim" \
            "$HOME/.vimrc" \
            "$HOME/.nvimrc" \
            "$HOME/.nvim" \
            "$XDG_CONFIG_HOME/nvim" \
            "$COLA_CONFIG_HOME"

  make_vim_dirs

  clone_repo "$COLA_CONFIG_HOME" \
             "$COLA_REPO_URL" \
             "$COLA_REPO_BRANCH" \
             "$COLA_APP_NAME"

  link_files "$repo_vimrc_files"

  install_vim_plug "$plugin_url" \
                   "$COLA_CONFIG_HOME"

  if hash go &>/dev/null; then
    install_go_dep "github.com/golang/lint/golint" \
                   "github.com/jstemmer/gotags" \
                   "github.com/kisielk/errcheck" \
                   "github.com/nsf/gocode" \
                   "golang.org/x/tools/cmd/godoc" \
                   "golang.org/x/tools/cmd/goimports" \
                   "golang.org/x/tools/cmd/gorename" \
                   "golang.org/x/tools/cmd/oracle" \
                   "golang.org/x/tools/cmd/vet"
  fi

  # NOTE: I don't think there is another way to do this...
  bootstrap_vimrc="/tmp/vimrc.bootstrap"
  write_bootstrap_config "$bootstrap_vimrc"
  bootstrap_plugins "$bootstrap_vimrc"
  rm "$bootstrap_vimrc"
fi
