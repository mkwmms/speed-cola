#!/usr/bin/env bash

############################  SETUP PARAMETERS
app_name="xdg-vimrc"
[ -z "$VIM_CONFIG_HOME" ] && VIM_CONFIG_HOME="$HOME/.vim"
[ -z "$VIM_REPO_URI" ] && VIM_REPO_URI='https://github.com/mkwmms/xdg-vimrc'
[ -z "$VIM_REPO_BRANCH" ] && VIM_REPO_BRANCH='master'

VIM_PLUG_URI='https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'

GREEN='\033[0;32m'
RED='\033[0;31m'
BLUE='\033[0;34m'
YELLOW='\033[0;33m'
BOLD=`tput bold`
NORMAL=`tput sgr0`
RESET='\033[0;m'

if [[ -e "$HOME/.zshrc" ]]; then
  shell_startup="$HOME/.zshrc"
elif [[ -e "$HOME/.bashrc" ]]; then
  shell_startup="$HOME/.bashrc"
fi

repo_vimrc_files="vimrc"
hash gvim &>/dev/null && repo_vimrc_files="vimrc gvimrc"

local_vimrc_files="vimrc.local vimrc.local.before"

# TODO: verify against $PATH
if [[ "$OSTYPE" =~ ^(darwin)+ ]]; then
  VIM_UPDATE_PATH=${XDG_BIN_HOME:-"/usr/local/bin"}
elif [[ "$OSTYPE" =~ ^(linux)+ ]]; then
  VIM_UPDATE_PATH=${XDG_BIN_HOME:-"$HOME/.local/bin"}
else
  die "Unsupported OS. Only OS X and Linux are supported."
fi

############################ BASIC TOOLS
info() {
  printf "${BLUE}${BOLD}==>${NORMAL}${BOLD} ${1}${RESET}\n"
}

warn() {
  printf "${YELLOW}${BOLD}Warning:${NORMAL} ${1}${RESET}\n"
}

error() {
  printf "${RED}${BOLD}Error:${NORMAL} ${1}${RESET}\n"
}

die() {
  error "${1}"
  exit 1
}

############################ FUNCTIONS
xdg_error() {
  if [[ $1 == "XDG_CONFIG_HOME" ]]; then
    export_msg="try: echo \"export XDG_CONFIG_HOME=$HOME/.config\" >> $shell_startup"
  elif [[ $1 == "XDG_DATA_HOME" ]]; then
    export_msg="try: echo \"export XDG_DATA_HOME=$HOME/.local/share\" >> $shell_startup"
  elif [[ $1 == "XDG_CACHE_HOME" ]]; then
    export_msg="try: echo \"export XDG_CACHE_HOME=$HOME/.cache\" >> $shell_startup"
  fi

  error "\$$1 must be set to use these vim config files. \n$export_msg \
  \nSee: http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html"
}

do_backup() {
  # if [ -e "$1" ] || [ -e "$2" ] || [ -e "$3" ]; then
  info "Backing up your original vim configuration"
  today=`date +%Y-%m-%d_%s`
  for i in "$@"; do
    [[ -e "$i" ]] && mv -v "$i" "$i.$today"
  done
  # fi
}

clone_repo() {
  local repo_path="$1"
  local repo_uri="$2"
  local repo_branch="$3"
  local repo_name="$4"

  info "Installing $repo_name"
  mkdir -p "$repo_path"
  git clone -b "$repo_branch" "$repo_uri" "$repo_path"
}

update_repo() {
  local repo_path="$1"
  local repo_uri="$2"
  local repo_branch="$3"
  local repo_name="$4"

  info "Updating $repo_name"

  cd "$repo_path" && git pull origin "$repo_branch"
}

install_vim_plug() {
  info "Installing vim-plug"

  [[ -e "${1}/bundle" ]] && rm -rf "${1}/bundle"

  curl -fLo "${1}/autoload/plug.vim" --create-dirs "${VIM_PLUG_URI}"
}

create_local_files() {
  for file in $1; do
    dot_file="${XDG_CONFIG_HOME}/vim/${file}"
    touch "${dot_file}"
  done
}

link_files() {
  for file in $1; do
    dot_file="${HOME}/.${file}"
    if [ ! -e "${dot_file}" ]; then
      ln -s "${VIM_CONFIG_HOME}/${file}" "${dot_file}"
    fi
  done

  if which nvim > /dev/null; then
    ln -sf "${VIM_CONFIG_HOME}" "${HOME}/.nvim"
    ln -sf "${VIM_CONFIG_HOME}/vimrc" "${HOME}/.nvimrc"
  fi
}

install_go_deps() {
  if hash go &>/dev/null; then
    info "Installing golang dependencies..."
    gopackages="\
      github.com/golang/lint/golint \
      github.com/jstemmer/gotags \
      github.com/kisielk/errcheck \
      github.com/nsf/gocode \
      golang.org/x/tools/cmd/godoc \
      golang.org/x/tools/cmd/goimports \
      golang.org/x/tools/cmd/gorename \
      golang.org/x/tools/cmd/oracle \
      golang.org/x/tools/cmd/vet \
      "

    for p in $gopackages; do
      echo "Installing ${p}..."
      go get -f -u $p
      # echo -e "\t${GREEN}DONE${RESET}    ${BOLD}${p}${NORMAL}"
    done
    ln -sf "${VIM_CONFIG_HOME}/snippets/go.snip" "${XDG_DATA_HOME}/vim/snippets"
    # echo -e "${GREEN}DONE${RESET}    ${BOLD}golang${NORMAL} dependencies"
  fi
}

install_plugins() {
  local vimrc="$1"
  local vimcmd="$2"
  vim -u "${vimrc}" +"$vimcmd" +'qall!'
  if hash nvim &>/dev/null; then
      nvim -u "${vimrc}" +"$vimcmd" +'qall!'
  fi
}

bootstrap_plugins() {
  info "Installing plugins & plugin dependencies"
  local vimrc="$1"
  install_plugins "${vimrc}" "silent! PlugInstall!|silent! GoInstallBinaries!|"
}

update_plugins() {
  info "Updating plugins & plugin dependencies"
  install_plugins "$1" "silent! PlugUpdate!|"
}

############################ MAIN()
[[ -z $XDG_CONFIG_HOME ]] && xdg_error "XDG_CONFIG_HOME" && should_die=1
[[ -z $XDG_CACHE_HOME ]] && xdg_error "XDG_CACHE_HOME" && should_die=1
[[ -z $XDG_DATA_HOME ]] && xdg_error "XDG_DATA_HOME" && should_die=1
[[ $should_die -eq 1 ]] && exit 1

mkdir -p "${XDG_CONFIG_HOME}/vim"
mkdir -p "${XDG_CACHE_HOME}/vim/{undo,swap,backup}"
mkdir -p "${XDG_DATA_HOME}/vim/{sessions,snippets}"

if [[ -e "${VIM_CONFIG_HOME}" ]]; then
  cd "${VIM_CONFIG_HOME}"
  should_update_repo=false
  [[ `git remote -v` =~ "${VIM_REPO_URI}" ]] && should_update_repo=true
else
  should_update_repo=false
fi

if [[ $should_update_repo == true ]]; then
  update_repo "${VIM_CONFIG_HOME}" \
               "${VIM_REPO_URI}" \
               "${VIM_REPO_BRANCH}" \
               "$app_name"

  update_plugins "${VIM_CONFIG_HOME}/vimrc"
else
  do_backup "${HOME}/.vim" \
            "${HOME}/.vimrc" \
            "${HOME}/.gvimrc"

  clone_repo "${VIM_CONFIG_HOME}" \
             "${VIM_REPO_URI}" \
             "${VIM_REPO_BRANCH}" \
             "$app_name"

  install_vim_plug "${VIM_CONFIG_HOME}"

  install_go_deps

  bootstrap_plugins "${VIM_CONFIG_HOME}/Plug.vim"
fi

create_local_files "${local_vimrc_files}"

link_files "${repo_vimrc_files}"
