#!/usr/bin/env bash

####################################### BASIC TOOLS
# GREEN='\033[0;32m'
RED='\033[0;31m'
BLUE='\033[0;34m'
YELLOW='\033[0;33m'
BOLD=$(tput bold)
NORMAL=$(tput sgr0)
RESET='\033[0;m'

############################# printing functions
info() {
  echo -e "${BLUE}${BOLD}==> ${NORMAL}${BOLD}${1}${RESET}"
}

warn() {
  echo -e "${YELLOW}${BOLD}Warning: ${NORMAL}${1}${RESET}"
}

warn_xdg() {
  local xdg_dir=$1
  local xdg_default_dir=$2

  local shell_startup
  if [[ -e "$HOME/.zshrc" ]]; then
    shell_startup="$HOME/.zshrc"
  elif [[ -e "$HOME/.bashrc" ]]; then
    shell_startup="$HOME/.bashrc"
  fi

  warn "If you don't set \$$xdg_dir vim will use the default: $xdg_default_dir \
  \nset it: echo \"export ${xdg_dir}=$xdg_default_dir\" >> $shell_startup \
  \nSee: http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html"
}

error() {
  echo -e "${RED}${BOLD}Error: ${NORMAL}${1}${RESET}"
}

die() {
  error "$1"
  exit 1
}

####################################### FUNCTIONS
############################# utilities
mkdir_p() {
  for dir in "$@"; do
    mkdir -p "$dir" >/dev/null 2>&1
  done
}

make_vim_dirs() {
  mkdir_p "$XDG_CONFIG_HOME"/vim \
          "$XDG_CACHE_HOME"/vim/{undo,swap,backup} \
          "$XDG_DATA_HOME"/vim/{sessions,snippets}
}

write_bootstrap_config() {
cat >"$1" <<EOF
if !has('nvim')
  set nocompatible
endif

if empty("\$XDG_CACHE_HOME")
  let \$XDG_CACHE_HOME = "$HOME/.cache"
endif

if empty("\$XDG_CONFIG_HOME")
  let \$XDG_CONFIG_HOME = "$HOME/.config"
endif

if empty("\$XDG_DATA_HOME")
  let \$XDG_DATA_HOME = "$HOME/.local/share"
endif

set runtimepath=\$XDG_CONFIG_HOME/vim,\$XDG_DATA_HOME/vim/plugged,\$XDG_CONFIG_HOME/vim/after,\$VIM,\$VIMRUNTIME
set directory=\$XDG_CACHE_HOME/vim/swap,~/,/tmp
set backupdir=\$XDG_CACHE_HOME/vim/backup,~/,/tmp
set undodir=\$XDG_CACHE_HOME/vim/undo,~/,/tmp

let g:session_default_to_last = 0
let g:session_autoload = 'no'
let g:session_autosave = 'no'

source \$XDG_CONFIG_HOME/vim/Plug.vim
EOF
}

############################# validation
is_installed() {
  local ret=0
  hash "$1" >/dev/null 2>&1 || ret=1
  return "$ret"
}

must_be_installed() {
  local not_installed=""
  for app in "$@"; do
    is_installed "$app" || not_installed="$app $not_installed"
  done

  [[ -n "$not_installed" ]] && die "Please install: $not_installed to continue."
  return 0
}

dir_exists() {
  local dir="$1"
  local does_exist=0
  [[ -d "$dir" ]] && does_exist=1
  return "$does_exist"
}

dir_must_exist() {
  for dir in "$@"; do
    if dir_exists "$dir" == false; then
      warn "$dir does not exist and is needed, creating it now..."
      mkdir_p "$dir"
    fi
  done
}

file_exists() {
  local file="$1"
  local does_exist=0
  [[ -e "$file" ]] && does_exist=1
  return "$does_exist"
}

file_must_exist() {
  for file in "$@"; do
    if file_exists "$file" == false; then
      warn "$file does not exist and is needed, creating it now..."
      dir_must_exist "$(dirname "$file")"
      touch "$file"
    fi
  done
}

validate_xdg_dirs() {
  if [[ -z "$XDG_CONFIG_HOME" ]]; then
    export XDG_CONFIG_HOME="$HOME/.config"
    warn_xdg "XDG_CONFIG_HOME" "$XDG_CONFIG_HOME"
  fi

  if [[ -z "$XDG_CACHE_HOME" ]]; then
    export XDG_CACHE_HOME="$HOME/.cache"
    warn_xdg "XDG_CACHE_HOME" "$XDG_CACHE_HOME"
  fi

  if [[ -z "$XDG_DATA_HOME" ]]; then
    export XDG_DATA_HOME="$HOME/.local/share"
    warn_xdg "XDG_DATA_HOME" "$XDG_DATA_HOME"
  fi

  dir_must_exist "$XDG_CONFIG_HOME" "$XDG_CACHE_HOME" "$XDG_DATA_HOME"
}

############################# backup
do_backup() {
  info "Backing up your original vim configuration"
  # msg=$(date +%Y-%m-%d_%s)
  local msg="orig"
  for file in "$@"; do
    if [[ -e "$file" ]] || [[ -L "$file" ]]; then
      mv -v "$file" "$file.$msg"
    fi
  done
}

############################# linkers
link() {
  ln -vsf "$1" "$2" 2> /dev/null
}

link_config() {
  info "Linking vim configuration files"
  for file in "$@"; do
    link "$COLA_CONFIG_HOME/$file" "$HOME/.$file"
  done

  if is_installed "nvim"; then
    link "$COLA_CONFIG_HOME" "$HOME/.nvim"
    link "$COLA_CONFIG_HOME/vimrc" "$HOME/.nvimrc"
  fi
}

link_snippet() {
  for file in "$@"; do
    link "$COLA_CONFIG_HOME/snippets/${file}.snip" \
         "$XDG_DATA_HOME/vim/snippets/${file}.snip"
  done
}

############################# installers
install_vim_plug() {
  local uri="$1"
  local dest_file="$2"
  # [[ -e "$dest_dir/bundle" ]] && rm -rf "$dest_dir/bundle"
  if file_exists "$dest_file" == false; then
    info "Installing vim-plug"
    download "$uri" "$dest_file"
  fi
}

install_go_dep() {
  info "Installing golang dependencies..."
  for package in "$@"; do
    echo "${package}"
    go get -f -u "$package"
  done
  link_snippet "go"
}

install_plugins() {
  local vimrc="$1"
  local vimcmd="$2"
  if [[ "$COLA_INTERACTIVE" == true ]]; then
    vim -u "$vimrc" +"$vimcmd" +'qall!'
    if is_installed "nvim"; then
      nvim -u "$vimrc" +"$vimcmd" +'qall!'
    fi
  else
    vim -u "$vimrc" +"$vimcmd" +'qall!' > /dev/null
    if is_installed "nvim"; then
      nvim -u "$vimrc" +"$vimcmd" +'qall!' > /dev/null
    fi
  fi
}

bootstrap_plugins() {
  info "Installing plugins & plugin dependencies"
  local vimrc="$1"
  install_plugins "$vimrc" "silent! PlugInstall!|silent! GoInstallBinaries!|"
}

update_plugins() {
  info "Updating plugins & plugin dependencies"
  install_plugins "$1" "PlugUpgrade|silent! PlugClean!|silent! PlugUpdate|"
}

############################# downloaders
download() {
  curl -fLo "$2" --create-dirs "$1"
}

clone_repo() {
  local repo_path="$1"
  local repo_uri="$2"
  local repo_branch="$3"
  local repo_name="$4"
  info "Installing $repo_name"
  mkdir_p "$repo_path"
  git clone -b "$repo_branch" "$repo_uri" "$repo_path"
}

update_repo() {
  local repo_path="$1"
  local repo_uri="$2"
  local repo_branch="$3"
  local repo_name="$4"
  info "Updating $repo_name"
  cd "$repo_path" && git pull origin "$repo_branch"
}

#######################################  SETUP
must_be_installed "vim" "git" "curl"
validate_xdg_dirs

[[ -z "$COLA_APP_NAME" ]] && COLA_APP_NAME="speedcola"
[[ -z "$COLA_CONFIG_HOME" ]] && COLA_CONFIG_HOME="${XDG_CONFIG_HOME}/vim"
[[ -z "$COLA_REPO_URL" ]] && COLA_REPO_URL="https://github.com/mkwmms/speedcola"
[[ -z "$COLA_REPO_BRANCH" ]] && COLA_REPO_BRANCH='master'
[[ -z "$COLA_GOLANG_DEPS" ]] && COLA_GOLANG_DEPS=true
[[ -z "$COLA_DO_BACKUP" ]] && COLA_DO_BACKUP=true
if [[ -z "$COLA_INTERACTIVE" ]]; then
  if [[ -n "$CONTINUOUS_INTEGRATION" ]] || [[ -n "$CI" ]]; then
     COLA_INTERACTIVE=false
  else
    COLA_INTERACTIVE=true
  fi
fi

plugin_url='https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'

repo_vimrc_files="vimrc"
# is_installed "gvim" && repo_vimrc_files="vimrc gvimrc"

####################################### MAIN()
if [[ -e "$COLA_CONFIG_HOME" ]]; then
  cd "$COLA_CONFIG_HOME"
  [[ $(git remote -v) =~ $COLA_REPO_URL ]] && should_update_repo=true
else
  should_update_repo=false
fi

if [[ "$should_update_repo" == true ]]; then
  make_vim_dirs
  
  update_repo "$COLA_CONFIG_HOME" \
              "$COLA_REPO_URL" \
              "$COLA_REPO_BRANCH" \
              "$COLA_APP_NAME"
              
  install_vim_plug "$plugin_url" \
                   "$COLA_CONFIG_HOME/autoload/plug.vim"
  
  link_config "$repo_vimrc_files"

  update_plugins "$COLA_CONFIG_HOME/vimrc"
else

  if [[ "$COLA_DO_BACKUP" == true ]]; then
    do_backup "$HOME/.vim" \
              "$HOME/.vimrc" \
              "$HOME/.nvimrc" \
              "$HOME/.nvim" \
              "$XDG_CONFIG_HOME/nvim" \
              # "$COLA_CONFIG_HOME"
  fi 

  make_vim_dirs

  clone_repo "$COLA_CONFIG_HOME" \
             "$COLA_REPO_URL" \
             "$COLA_REPO_BRANCH" \
             "$COLA_APP_NAME"

  link_config "$repo_vimrc_files"

  install_vim_plug "$plugin_url" \
                   "$COLA_CONFIG_HOME/autoload/plug.vim"

  if is_installed "go" && [[ "$COLA_GOLANG_DEPS" == true ]]; then
    install_go_dep "github.com/golang/lint/golint" \
                   "github.com/jstemmer/gotags" \
                   "github.com/kisielk/errcheck" \
                   "github.com/nsf/gocode" \
                   "golang.org/x/tools/cmd/godoc" \
                   "golang.org/x/tools/cmd/goimports" \
                   "golang.org/x/tools/cmd/gorename" \
                   "golang.org/x/tools/cmd/oracle" \
                   "golang.org/x/tools/cmd/vet"
  fi

  # NOTE: I don't think there is another way to do this...
  bootstrap_vimrc="/tmp/vimrc.bootstrap"
  write_bootstrap_config "$bootstrap_vimrc"
  bootstrap_plugins "$bootstrap_vimrc"
  rm "$bootstrap_vimrc"
fi
